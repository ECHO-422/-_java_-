package ChatRoom;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;
import java.util.Scanner;

import javax.swing.SwingWorker;

public class RevFileThread extends Thread {
	private final Socket fileSocket; //接收文件的套接字
    private static final int BUFSIZE=8096;//缓冲区大小    
    HashMap<String,Socket>SocketMap;
    String name; //对应主机的名字
    public RevFileThread(Socket fileSocket,HashMap<String,Socket>So) { 
        this.fileSocket=fileSocket;
        try
		{
			//Scanner in=new Scanner(fileSocket.getInputStream());
			//in.useDelimiter("\n");
			//name=in.nextLine();
        	DataInputStream in=new DataInputStream(
                    new BufferedInputStream(
                    fileSocket.getInputStream()));  
        	name=in.readUTF();
			System.out.println("!------"+name);
		}
		catch(Exception e)
		{
			System.out.println("创建输入流出错");
		}
		this.SocketMap=So;
		So.put(name, fileSocket);//将自己加进去
		this.start();
		System.out.println("开始接收！！！");
    }
    public void run() {        
    	//获取套接字输入流
    	try {
    		System.out.println("run！！！");
        DataInputStream in=new DataInputStream(
                           new BufferedInputStream(
                           fileSocket.getInputStream()));  
        //接收文件名、文件长度
        String filename=in.readUTF(); //文件名
        System.out.println("接受的文件名："+filename);
        int fileLen=(int)in.readLong(); //文件长度      
        //创建文件输出流
        File file=new File("./upload/"+filename);    
        if(file.exists()) file.delete();
		file.createNewFile(); //第一次创建文件
        //文件输出流
        BufferedOutputStream out=new BufferedOutputStream(
                                  new FileOutputStream(file));    
        //接收文件内容，存储为外部文件
        byte[] buffer=new byte[BUFSIZE]; //读入缓冲区
        int numRead=0; //单次读取的字节数
        int numFinished=0;//总完成字节数
        while (numFinished<fileLen && (numRead=in.read(buffer))!=-1) { //输入流可读      
            out.write(buffer,0,numRead);
            numFinished+=numRead; //已完成字节数
        }//end while
        System.out.println("服务器接收文件------");
        //定义字符输出流
        PrintWriter pw=new PrintWriter(fileSocket.getOutputStream(),true);       
        //关闭流
        if (numFinished>=fileLen) {//文件接收完成？
            pw.println("M_DONE"); //回送成功消息
           ServerJFrame.area.append(filename+"  接收成功！\n");
           System.out.println("服务器文件接收成功!");
        }else {
            pw.println("M_LOST"); //回送失败消息
            ServerJFrame.area.append(filename+"  接收失败！\n");
        }//end if      
        in.close();
        out.close();
        pw.close();
        fileSocket.close();
    	}
    	catch(Exception e)
    	{
    		System.out.println("ERROR!");
    	}
    }//end doInBackground    
}
